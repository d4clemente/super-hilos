#include <stdio.h>
#include <signal.h>
#include <pthread.h>
#include <semaphore.h>
#include <time.h>
#include <stdlib.h>
3include <math.h>

#define STD_CLIENTS 20
int i;
int clients;
int cajas;
int tiempo; //variable para guardar los tiempos de compra y espera
int box; //variable para guardar la seleccion de cajas
double m_time = 0;
double des_time = 0;
pthread_t * array_threads; //array dinamico para guardar los diferentes thread (eq a clientes)  
pthread_mutex_t* array_mutex; //array dinamico para guardar los diferentes mutex(eq a cajas)
int* array_time; //array dinamico para guardar los tiempos de espera (eperando en cola + pagado)

void *thread_handler(void *);

int main(int argc, char* argv[]){
  //numero de argummentos necesario [2,3] (super CLIENTES CAJAS)
  if ((argc == 1) || (argc>3)){
    fprintf("Numero incorrecto de argumentos");
    return 1;
  }
  if (argc == 2){
    cajas = argv[1];
    clients = cajas*20; //medida estándar de clientes en función de las cajas disponibles
  }
  if (argc == 3){
    cajas = argv[1];
    clients = argv[2];
  }
  
  //inicializando los arrays dinamicos en función de los tamaños necesarios
  array_threads = (pthread_t*) malloc(clients * sizeof(pthread_t)); 
  array_mutex = (pthread_mutex_t*) malloc(cajas * sizeof(pthread_mutex_t));
  array_time = (int*) malloc(clients * sizeof(int));
  //inicializamos las variables "time" y "box" para usarlas mediante la función rand
  srand(time(NULL));
  
  //inicializamos los mutex dentro de cada posición de "array_mutex"
  for(i = 0; i<cajas; i++){
    pthread_mutex_init(&array_mutex[i], NULL);
  }
  //inicializamos los threads dentro de cada posición de "array_threads"
  for(i = 0; i<clients; i++){
    pthread_create(&array_threads[i], NULL, thread_handler, (void*) i);
  }
  for(i = 0; i<clients; i++){
    pthread_join(&array_threads[i],NULL);
  }
  m_time = m_time/clients;
  for(i = 0; i<clients; i++){
    des_time += pow(((double)array_time[i]-m_time),2);
  }
  des_time = sqrt(des_time/clients);
  printf("Supermercado cerrado.\nTiempo medio de espera: %f\nDesviación típica del tiempo medio de espera: %f", m_time, des_time);
  
  //cerramos los mutex y liberamos la memoria dinamica antes de acabar
  for(i = 0; i<cajas; i++){
    pthread_mutex_destroy(array_mutex[i]);
  }
  free(array_mutex);
  free(array_time);
  free(array_threads);
  return 0;
}

//función handler de cada thread
void *thread_handler(void * id){
  time_t time1, time2;
  double waiting_time;
                                                //para el id necesarios & o *???
  printf("Cliente %d realizando compra",&id);
  //tiempo de compra, simplemente hasces sleep con ese tiempo antes de entrar a la cola
  tiempo = rand() % (1000+1-100)+100;
  usleep(tiempo);
  //asignamos una caja de forma aleatoria
  box = rand() % (cajas - 0) + 0
  printf("Cliente %d asignado a caja %d", &id,box);
  //competimos por nuestra caja asiganda, de manera que si esta libre entraremos a pagar tardando un tiempo de time (detallado mas adelante)
  time1 = time(NULL);
  pthread_mutex_lock(&array_mutex[box]);
  //guardamos el time una vez atendido y sacamos el tiempo de espera
    time2 = time(NULL);
    //obtenemos la diferencia de tiempos en segundos
    waiting_time = (double) difftime(time2,time1) * 1000;
    array_time[&id] = waiting_time;
    m_time += waiting_time;
    printf("Cliente %d atendido", &id);
    //tiempo de pagado
    tiempo = rand() % (500+1-100)+100;
    usleep(tiempo);
  //termina de atenderle el cajero: desbloqueamos
  pthread_mutex_unlock($array_mutex[box]);
  printf("Cliente %d saliendo despues de esperar %d", &id, array_time[&id]);
  pthread_exit(NULL);
}
